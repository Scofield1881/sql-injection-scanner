import requests #HTTP istekleri göndermek için 
from payloads import payloads  #Payload listemizi import ediyoruz

def test_sql_injection(url):
     #Tarama sonuçlarını saklayacağımız bir liste oluşturdum.
    results = []
    #Tüm payloadları surayla test ediyoruz.
    for payload in payloads:
        #payloadı URL ye ekliyoruz.
        test_url=url + payloads
        #HTTP isteği gönderiyoruz.
        response = requests.get(test_url)
        #Yanıtta hata mesajı arıyoruz.
        if "error" in response.text.lower() or "warning" in response.text.lower():
           #Açık varsa sonuçları ekliyoruz.
           results.append({
                "payload":payload,
                 "status":"vulnerable", #Güvenlik açığı mevcut 
                 "url":test_url
          })

        else:
             #Açık yoksa güvenli olarak işaretliyoruz.
             result.append({
                "payload":payload,
                "status": "safe", #Güvenlik açığı yok
                "url":test_url
            })
import json #Sonuçları JSON formatında kaydetmek için 
import requests #HTTP istekleri göndermek için 
from payloads import payloads  #Payload listemizi import ediyoruz

def test_sql_injection(url):
     #Tarama sonuçlarını saklayacağımız bir liste oluşturdum.
    results = []
    #Tüm payloadları surayla test ediyoruz.
    for payload in payloads:
        #payloadı URL ye ekliyoruz.
	test_url=url + payloads
	#HTTP isteği gönderiyoruz.
	response = requests.get(test_url)
	#Yanıtta hata mesajı arıyoruz.
	if "error" in response.text.lower() or "warning" in response.text.lower():
	   #Açık varsa sonuçları ekliyoruz.
	   results.append({
		"payload":payload,
		 "status":"vulnerable", #Güvenlik açığı mevcut 
		 "url":test_url
	  })

	else:
	     #Açık yoksa güvenli olarak işaretliyoruz.
	     result.append({
		"payload":payload,
		"status": "safe", #Güvenlik açığı yok
		"url":test_url
	    })
#Tüm sonuçları döndürüyoruz.
return results

main():
#Kullanıcıdan hedef URL yi alıyoruz.
url =input("Test etmek istediğiniz URL'yi girin:")
#
#SQL Injection testlerine başlıyoruz.
results = test_sql_injection(url)

#Sonuçları JSON dosyasına kaydediyoruz.
with open ("results.json","w") as outfile:
   json.dump(results,outfile,indent=4)
print("Sonuçlar 'results.json' dosyasına kaydedildi.")

if __name__== "__main__":
   main()


#Bu Kodun Mantığını Kısaca Özetlersek
#Kullanıcıdan URL alıyoruz.
#Payload'ları sırayla URL'ye ekleyerek test ediyoruz.
#Her test sonucunu düzenli bir şekilde saklıyoruz.
#Sonuçları JSON dosyasına kaydediyoruz.

from payloads import payloads  # Payload listesini içe aktarıyoruz

# Yeni eklenen kod
import requests
import json

def test_payloads(target_url, payloads):
    results = []  # Test sonuçlarını tutacak bir liste

    for payload in payloads:
        try:
            # Hedef URL'ye payload eklenerek bir istek gönderilir
            response = requests.get(target_url, params={"input": payload})

            # Sunucudan dönen veriler kaydedilir
            result = {
                "payload": payload,
                "status_code": response.status_code,
                "response_length": len(response.text),
                "response_snippet": response.text[:100]  # İlk 100 karakter alınır
            }
            results.append(result)  # Sonuçlar listeye eklenir

        except requests.exceptions.RequestException as e:
            # Hata durumunda sonuçlar kaydedilir
            result = {
                "payload": payload,
                "error": str(e)
            }
            results.append(result)

    # JSON formatında sonuçlar düzenlenir
    return json.dumps({"results": results}, indent=4)

# Kullanıcıdan hedef URL alınır
if __name__ == "__main__":
    target_url = input("Hedef URL'yi girin (örn: http://example.com): ")
    json_output = test_payloads(target_url, payloads)
    print(json_output)  # JSON çıktısı ekrana yazdırılır

    # Sonuçlar bir dosyaya kaydedilir
    with open("results.json", "w") as f:
        f.write(json_output)
    print("\nSonuçlar 'results.json' dosyasına kaydedildi.")
